@article{posix,
	title = {{IEEE} Standard for Information Technology–Portable Operating System Interface ({POSIX}({TM})) Base Specifications, Issue 7},
	doi = {10.1109/IEEESTD.2018.8277153},
	pages = {1--3951},
	journaltitle = {{IEEE} Std 1003.1-2017 (Revision of {IEEE} Std 1003.1-2008)},
	date = {2018-01},
	note = {Conference Name: {IEEE} Std 1003.1-2017 (Revision of {IEEE} Std 1003.1-2008)},
}

@online{david_adrian_tldrfail_2023,
	title = {tldr.fail},
	url = {https://tldr.fail/},
	author = {{David Adrian} and {Emily Stark} and {Ryan Dickson}},
	urldate = {2024-03-10},
	date = {2023-09-28},
}

@report{benjamin_merkle_2024,
	title = {Merkle Tree Certificates for {TLS}},
	url = {https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/02/},
	abstract = {This document describes Merkle Tree certificates, a new certificate type for use with {TLS}. A relying party that regularly fetches information from a transparency service can use this certificate type as a size optimization over more conventional mechanisms with post- quantum signatures. Merkle Tree certificates integrate the roles of X.509 and Certificate Transparency, achieving comparable security properties with a smaller message size, at the cost of more limited applicability.},
	number = {draft-davidben-tls-merkle-tree-certs-02},
	institution = {Internet Engineering Task Force},
	type = {Internet Draft},
	author = {Benjamin, David and O'Brien, Devon and Westerbaan, Bas},
	date = {2024-03-04},
	file = {Full Text PDF:/home/max/Zotero/storage/ML8TD79Z/Benjamin et al. - 2024 - Merkle Tree Certificates for TLS.pdf:application/pdf},
}

@software{westerbaan_merkle_2024,
	title = {Merkle Tree Certificates for {TLS}},
	rights = {{BSD}-3-Clause},
	url = {https://github.com/bwesterb/mtc},
	abstract = {Go implementation of Merkle Tree Certificates},
	author = {Westerbaan, Bas},
	date = {2024-02-12},
	note = {commit: 21eea5c},
}

@inproceedings{raavi_performance_2021,
	title = {Performance Characterization of Post-Quantum Digital Certificates},
	url = {https://ieeexplore.ieee.org/abstract/document/9522179},
	doi = {10.1109/ICCCN52240.2021.9522179},
	abstract = {Public Key Infrastructure ({PKI}) generates and distributes digital certificates to provide the root of trust for securing digital networking systems. To continue securing digital networking in the quantum era, {PKI} should transition to use quantum-resistant cryptographic algorithms. The cryptography community is developing quantum-resistant primitives/algorithms, studying, and analyzing them for cryptanalysis and improvements. National Institute of Standards and Technology ({NIST}) selected finalist algorithms for the post-quantum digital signature cipher standardization, which are Dilithium, Falcon, and Rainbow. We study and analyze the feasibility and the processing performance of these algorithms in memory/size and time/speed when used for {PKI}, including the key generation from the {PKI} end entities (e.g., a {HTTPS}/{TLS} server), the signing, and the certificate generation by the certificate authority within the {PKI}. The transition to post-quantum from the classical ciphers incur changes in the parameters in the {PKI}, for example, Rainbow I significantly increases the certificate size by 163 times when compared with {RSA} 3072. Nevertheless, we learn that the current X.509 supports the {NIST} post-quantum digital signature ciphers and that the ciphers can be modularly adapted for {PKI}. According to our empirical implementations-based study, the post-quantum ciphers can increase the certificate verification time cost compared to the current classical cipher and therefore the verification overheads require careful considerations when using the post-quantum-cipher-based certificates.},
	eventtitle = {2021 International Conference on Computer Communications and Networks ({ICCCN})},
	pages = {1--9},
	booktitle = {2021 International Conference on Computer Communications and Networks ({ICCCN})},
	author = {Raavi, Manohar and Chandramouli, Pranav and Wuthier, Simeon and Zhou, Xiaobo and Chang, Sang-Yoon},
	urldate = {2024-02-16},
	date = {2021-07},
	note = {{ISSN}: 2637-9430},
	keywords = {Servers, Computer architecture, Ciphers, Digital Certificate, {NIST}, {PKI}, Post-Quantum Cryptography, Public key, Quantum computing, Quantum-Resistant Cryptography, Standardization},
	file = {IEEE Xplore Abstract Record:/home/max/Zotero/storage/Y9XCX4W2/9522179.html:text/html;IEEE Xplore Full Text PDF:/home/max/Zotero/storage/TC5QKLMH/Raavi et al. - 2021 - Performance Characterization of Post-Quantum Digit.pdf:application/pdf},
}

@online{bas_westerbaan_state_2024,
	title = {The state of the post-quantum Internet},
	url = {https://blog.cloudflare.com/pq-2024},
	abstract = {Today, nearly two percent of all {TLS} 1.3 connections established with Cloudflare are secured with post-quantum cryptography. What once was the topic of futuristic tech demos will soon be the new security baseline for the Internet. In this blog post we’ll take measure of where we are now in early 2024, what to expect for the coming years, and what you can do today.},
	titleaddon = {The Cloudflare Blog},
	author = {{Bas Westerbaan}},
	urldate = {2024-03-13},
	date = {2024-03-05},
	file = {Snapshot:/home/max/Zotero/storage/RCXDEFAJ/pq-2024.html:text/html},
}

@report{tls1.3_hybrid,
	title = {Hybrid key exchange in {TLS} 1.3},
	url = {https://datatracker.ietf.org/doc/draft-ietf-tls-hybrid-design/09/},
	abstract = {Hybrid key exchange refers to using multiple key exchange algorithms simultaneously and combining the result with the goal of providing security even if all but one of the component algorithms is broken. It is motivated by transition to post-quantum cryptography. This document provides a construction for hybrid key exchange in the Transport Layer Security ({TLS}) protocol version 1.3. Discussion of this work is encouraged to happen on the {TLS} {IETF} mailing list tls@ietf.org or on the {GitHub} repository which contains the draft: https://github.com/dstebila/draft-ietf-tls-hybrid-design.},
	number = {draft-ietf-tls-hybrid-design-09},
	institution = {Internet Engineering Task Force},
	type = {Internet Draft},
	author = {Stebila, Douglas and Fluhrer, Scott and Gueron, Shay},
	date = {2023-09-07},
	file = {Full Text PDF:/home/max/Zotero/storage/JAHY5WN6/Stebila et al. - 2023 - Hybrid key exchange in TLS 1.3.pdf:application/pdf},
}

@online{rust,
	title = {Rust Programming Language},
	url = {https://www.rust-lang.org/},
	abstract = {A language empowering everyone to build reliable and efficient software.},
	urldate = {2024-03-13},
	langid = {american},
	file = {Snapshot:/home/max/Zotero/storage/I95HNJCU/www.rust-lang.org.html:text/html},
}

@report{google_view_rust,
	title = {Secure by Design: Google's Perspective on Memory Safety},
	institution = {Google Security Engineering},
	author = {Rebert, Alex and Kern, Christoph},
	date = {2024},
	file = {Rebert and Kern - Secure by Design Google’s Perspective on Memory S.pdf:/home/max/Zotero/storage/589L52XY/Rebert and Kern - Secure by Design Google’s Perspective on Memory S.pdf:application/pdf},
}

@online{linux_kernel_rust,
	title = {Rust — The Linux Kernel documentation},
	url = {https://docs.kernel.org/rust/index.html#the-rust-experiment},
	urldate = {2024-03-13},
	file = {Rust — The Linux Kernel documentation:/home/max/Zotero/storage/CI72YC7R/index.html:text/html},
}
